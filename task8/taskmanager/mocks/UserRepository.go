// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "taskmanager/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user domain.User) string {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Loginfunctionality provides a mock function with given fields: ctx, userinfo
func (_m *UserRepository) Loginfunctionality(ctx context.Context, userinfo domain.User) (bool, string) {
	ret := _m.Called(ctx, userinfo)

	if len(ret) == 0 {
		panic("no return value specified for Loginfunctionality")
	}

	var r0 bool
	var r1 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (bool, string)); ok {
		return rf(ctx, userinfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) bool); ok {
		r0 = rf(ctx, userinfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) string); ok {
		r1 = rf(ctx, userinfo)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
