package usecases_test

import (
	"context"
	"fmt"
	"taskmanager/domain"
	"taskmanager/mocks"
	"taskmanager/usecases"

	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"
)

type userusecaseTestSuite struct {	
// UserRepository is an autogenerated mock type for the UserRepository type
    repository  *mocks.UserRepository
	suite.Suite
	UserUsecase domain.UserUsecase
}

func (r *userusecaseTestSuite) SetupTest() {
	 r.repository = new(mocks.UserRepository)
	r.UserUsecase = usecases.NewUserUsecase(r.repository, 10*time.Second)
	
	 
}
func (r *userusecaseTestSuite) TestCreateUser() {
	user :=  domain.User{
		Name:"naol",
		Email:"email",	
		Password: "dfrg",
		Role: "user",
	}

	r.repository.On("CreateUser", mock.Anything, user).Return("user created").Once()
	successMessage := r.UserUsecase.CreateUser(context.Background(), user)
	assert.Equal(r.T(), "user created", successMessage)

	r.repository.AssertExpectations(r.T())

}
func (r *userusecaseTestSuite) TestLoginfunctionality() {
	user := domain.User{
	    Name:"naol",
		Email :"email",
		Password :"password",
		Role :"user",
	}
	// ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
// defer cancel()

    // Success case
    
        r.repository.On("Loginfunctionality", mock.Anything, user).Return(true, "abc123-token").Once()
         success, token := r.UserUsecase.Loginfunctionality(context.Background(), user)
		assert.Equal(r.T(), true, success)
		assert.Equal(r.T(), "abc123-token", token)
		r.repository.AssertExpectations(r.T()) 
	
}
func (r *userusecaseTestSuite) TearDownTest() {
  fmt.Println("TearDownTest")	
}
func TestDomain(t *testing.T){
   suite.Run(t,new(userusecaseTestSuite))
	
}    
